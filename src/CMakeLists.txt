set(SRCS yaml_private.h api.c reader.c scanner.c parser.c loader.c writer.c emitter.c dumper.c)

set(YAML_TARGETS)
option(BUILD_SHARED_LIBS "Build shared library" true)
if(BUILD_SHARED_LIBS)
  add_library(yaml_shared SHARED ${SRCS})
  set_target_properties(yaml_shared PROPERTIES
    OUTPUT_NAME yaml            # shared library is named yaml
    VERSION ${YAML_SO_VERSION}
    SOVERSION ${YAML_SO_RELEASE}
    COMPILE_FLAGS -DYAML_DECLARE_EXPORT
    )
  list(APPEND YAML_TARGETS yaml_shared)
  if(NOT WIN32)
    install(TARGETS yaml_shared DESTINATION lib)
  endif(NOT WIN32)
endif(BUILD_SHARED_LIBS)

option(BUILD_STATIC_LIBS "Build static library" true)
if(BUILD_STATIC_LIBS)
  add_library(yaml_static STATIC ${SRCS})
  set_target_properties(yaml_static PROPERTIES
    COMPILE_FLAGS -DYAML_DECLARE_STATIC)
  if(NOT WIN32)
    set_target_properties(yaml_static PROPERTIES
      OUTPUT_NAME yaml)         # static library is named yaml_static on Windows
  endif(NOT WIN32)
  list(APPEND YAML_TARGETS yaml_static)
  if(NOT WIN32)
    install(TARGETS yaml_static DESTINATION lib)
  endif(NOT WIN32)
endif(BUILD_STATIC_LIBS)

add_custom_target(yaml ${YAML_TARGETS})

# taken from http://www.cmake.org/Wiki/CMakeMacroLibtoolFile
# modified to add VERSION and SOVERSION
cmake_dependent_option(MAKE_LIBTOOL "Install libtool-compatible *.la file" false
  "BUILD_SHARED_LIBS" true)
macro(CREATE_LIBTOOL_FILE _target _install_DIR)
  get_target_property(_target_location ${_target} LOCATION)
  get_target_property(_target_version ${_target} VERSION)
  get_target_property(_target_soversion ${_target} SOVERSION)
  get_filename_component(_laname ${_target_location} NAME_WE)
  get_filename_component(_soname ${_target_location} NAME)
  set(_laname_abs "${CMAKE_CURRENT_BINARY_DIR}/${_laname}.la")
  file(WRITE ${_laname_abs} "# ${_laname}.la - a libtool library file\n")
  file(APPEND ${_laname_abs} "# Generated by cmake - GNU libtool 1.5.22\n")
  file(APPEND ${_laname_abs} "# The name that we can dlopen(3).\n")
  file(APPEND ${_laname_abs} "dlname='${_soname}.${_target_soversion}'\n\n")
  file(APPEND ${_laname_abs} "# Names of this library.\n")
  file(APPEND ${_laname_abs} "library_names='${_soname}.${_target_version} ${_soname}.${_target_soversion} ${_soname}'\n\n")
  file(APPEND ${_laname_abs} "# The name of the static archive.\n")
  if(BUILD_STATIC_LIBS)
    file(APPEND ${_laname_abs} "old_library='${_laname}.a'\n\n")
  else(BUILD_STATIC_LIBS)
    file(APPEND ${_laname_abs} "old_library=''\n\n")
  endif(BUILD_STATIC_LIBS)
  file(APPEND ${_laname_abs} "# Libraries that this one depends upon.\n")
  file(APPEND ${_laname_abs} "dependency_libs=''\n\n")
  file(APPEND ${_laname_abs} "# Version information.\n")
  file(APPEND ${_laname_abs} "current=0\n")
  file(APPEND ${_laname_abs} "age=0\n")
  file(APPEND ${_laname_abs} "revision=0\n\n")
  file(APPEND ${_laname_abs} "# Is this an already installed library?\ninstalled=yes\n\n")
  file(APPEND ${_laname_abs} "# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n")
  file(APPEND ${_laname_abs} "# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n")
  file(APPEND ${_laname_abs} "# Directory that this library needs to be installed in:\n")
  file(APPEND ${_laname_abs} "libdir='${CMAKE_INSTALL_PREFIX}${_install_DIR}'\n")
  if(NOT WIN32)
    install_files(${_install_DIR} FILES ${_laname_abs})
  endif(NOT WIN32)
endmacro(CREATE_LIBTOOL_FILE)

if(BUILD_SHARED_LIBS AND MAKE_LIBTOOL)
  CREATE_LIBTOOL_FILE(yaml_shared /lib)
endif(BUILD_SHARED_LIBS AND MAKE_LIBTOOL)
